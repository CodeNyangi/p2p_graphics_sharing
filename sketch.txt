Server 역할:
부트스트랩 및 검색: 서버는 기존 피어에 대한 정보를 제공하고 초기 연결 및 피어 검색을 용이하게 하여 새로운 클라이언트가 네트워크에 가입하도록 돕습니다.
디렉터리 서비스: 네트워크 전체에서 사용 가능한 GPU 리소스 카탈로그를 유지 관리하여 클라이언트가 성능, 가용성 및 기타 기준에 따라 적합한 리소스를 찾을 수 있도록 돕습니다.
인증 및 승인: 사용자 인증을 관리하고 승인된 클라이언트만 리소스를 제공하거나 소비할 수 있도록 보장하며 안전한 환경을 유지하는 역할을 담당합니다.
거래 관리: 해당되는 경우 서버는 결제 처리, 크레딧 유지, 거래 무결성 보장 등 GPU 리소스 사용과 관련된 거래를 처리합니다.
Client 역할:
리소스 공유: GPU 리소스를 제공하는 클라이언트는 일정, 성능 사양, 사용 조건을 포함하여 이러한 리소스의 가용성을 관리해야 합니다.
리소스 소비: GPU 리소스를 활용하려는 클라이언트는 사용 가능한 리소스를 검색하고, 조건을 협상하고, 리소스 활용을 위해 피어에 연결할 수 있어야 합니다.
피어 커뮤니케이션: 클라이언트는 보안 연결 설정 및 데이터 전송 처리를 포함하여 데이터 전송 및 공유 리소스 관리를 위해 서로 직접 통신합니다.
보안 및 암호화: 무단 액세스로부터 보호하고 개인정보를 보호하기 위해 모든 통신 및 데이터 전송에 대한 엔드투엔드 암호화를 포함한 보안 조치를 구현합니다.


gpu_p2p_sharing/
├── Cargo.toml    # The manifest file for Rust's package manager, Cargo.
├── src/
│   ├── main.rs   # Entry point for the application. Decides to run as server or client based on command line arguments.
│   ├── lib.rs    # Common functionalities, types, and traits used across the project.
│   ├── server/
│   │   ├── mod.rs    # Server module, orchestrates server functionalities.
│   │   ├── bootstrap.rs  # Handles initial peer discovery and network joining.
│   │   ├── directory.rs  # Manages the directory of GPU resources.
│   │   ├── auth.rs       # Authentication and authorization services.
│   │   └── transaction.rs  # Transaction management.
│   ├── client/
│   │   ├── mod.rs    # Client module, orchestrates client functionalities.
│   │   ├── sharing.rs  # Manages offering GPU resources to the network.
│   │   ├── consumption.rs  # Handles finding and using GPU resources.
│   │   ├── communication.rs  # Direct communication with other peers.
│   │   └── security.rs      # Security and encryption implementations.
│   └── utils/    # Utility functions and common definitions.
│       └── mod.rs
└── tests/    # Integration tests
    ├── server_tests.rs
    └── client_tests.rs
