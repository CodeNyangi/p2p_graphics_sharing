syntax = "proto3";

package tasks;

// Define a service for handling GPU-related tasks and training sessions
service TaskService {
  rpc RentGPU(RentGPURequest) returns (GenericResponse);
  rpc ReleaseGPU(ReleaseGPURequest) returns (GenericResponse);
  rpc StartTrainingSession(StartTrainingSessionRequest) returns (SessionResponse);
  rpc UpdateModelParameters(UpdateModelParametersRequest) returns (UpdateModelParametersResponse);
}

// Request messages
message RentGPURequest {
  int32 gpu_id = 1;
  int32 compute_units = 2;
}

message ModelParameters {
  int32 epoch = 1;
  string device = 2;  // Device on which to run the model (e.g., "gpu", "cpu")
  string strategy = 3;  // Distributed strategy to use (e.g., "Mirrored", "OneDevice")
  string training = 4;  // Type of training (e.g., "Fine-tune", "Transfer Learning")
}

message StartTrainingSessionRequest {
  int32 gpu_id = 1;
  bytes model_data = 2;  // The serialized model data or parameters.
  bytes dataset = 3;  // The serialized dataset.
  bytes hyperparameters = 4;  // The serialized hyperparameters.
}

message ReleaseGPURequest {
  int32 gpu_id = 1;
}

// Response messages
message SessionResponse {
  int32 session_id = 1;
}

message GenericResponse {
  string status = 1;
}


// Message to send updated model parameters during training.
message UpdateModelParametersRequest {
  int32 session_id = 1;
  bytes model_parameters = 2;  // Updated model parameters for synchronization.
}

message UpdateModelParametersResponse {
  string status = 1;  // Response status, e.g., "updated" or "error".
}
